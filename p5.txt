class RedRobin {

    class superBase {
        public number x;
        // TODO - meterle funciones a esta
    }
    
    class Base inherit superBase {
        public number B;
        public number arreglo[5];
        func public number compuesta() {
            B = B + 1;
            give B;
        }
        func public empty compuestaempty() {
            B = B + 1;
        }
    }
    class Jugador {
        public number J;
        public Base Bhcomp;
        public bool arrHeredado[10];
        
        func public empty heredada() {
            J = J + 1;
        }
        
        func public number heredadaConReturn() {
            give 3 + 3;
            heredada();
        }
    }
    
    class Equipo inherit Jugador {
        public number E;
        public Base Bcomposicion;
        
        func public empty probando() {
            number i;
            i = E + Bhcomp.B - Bcomposicion.arreglo[E + 3];
            i = i + Bcomposicion.B + 12;
            i = J + E;
            i = Bcomposicion.compuesta();
            i = heredadaConReturn();
            Bcomposicion.compuestaempty();
        }
    }    
    
    func public number funcionb() {
        Equipo e3;
        give e3.Bcomposicion.B + 2;
    }

    RedRobin() {
        Equipo e1, e2;
        number a;
        // atributos simple
        e1.E = 10;
        e2.E = 20;
        
        // atributos heredados
        e2.J = e1.J * e2.E;
        e1.arrHeredado[2] = true;
        
        //invocaciones simples
        e1.probando();
        
        // invocaciones heredadas
        a = e1.heredadaConReturn();
        e1.heredada();
        
        // composicion
        e2.Bcomposicion.x = -3;
        e1.Bcomposicion.arreglo[1] = 2;
        e1.Bhcomp.arreglo[1] = 3;
        
        // TODO - invocar funciones de composicion
        // a = e1.Bcomposicion.compuesta();
        //e1.Bcomposicion.compuestaempty();
        // TODO - invocar funciones heredadas de composicion
    }
}